{"version":3,"sources":["Component/Users/selector.js","Firebase/index.js","Firebase/config.js","Auth.jsx","Component/Users/operations.js","Component/Users/actions.js","Component/UIkit/PrimaryButton.jsx","Component/UIkit/GreyButton.jsx","Component/UIkit/TextInput.jsx","Templete/Login.jsx","Component/Tweets/actions.js","Component/Tweets/operations.js","Component/Tweets/selector.js","Component/TextIndicate.jsx","Templete/Home.jsx","Router.jsx","App.jsx","serviceWorker.js","Component/Store/initialState.js","Component/Users/reducers.js","Component/Tweets/reducers.js","Component/Store/store.js","index.js"],"names":["usersSelector","state","users","getUserId","createSelector","uid","getUserName","username","getTwitterName","twitterName","getIsSignedIn","isSignedIn","getUserImage","image","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","db","firestore","FirebaseTimestamp","storage","functions","Timestamp","Auth","children","dispatch","useDispatch","selector","useSelector","useEffect","a","onAuthStateChanged","user","collection","doc","get","then","snapshot","userState","data","type","payload","role","push","useStyles","makeStyles","button","backgroundColor","color","fontSize","height","marginButtom","width","PrimaryButton","props","classes","Button","className","variant","onClick","label","theme","GreyButton","TextInput","TextField","fullWidth","margin","multiline","required","rows","value","onChange","Login","StyledLogin","provider","TwitterAuthProvider","languageCode","setCustomParameters","lang","signInWithPopup","result","additionalUserInfo","console","log","twitterId","providerData","displayName","photoUrl","photoURL","timestamp","now","userData","createed_at","updated_at","set","styled","section","fetchTextAction","tweets","tweetRef","getTweetText","list","root","inline","display","TextIndicate","textUid","text","userImage","userLayout","userTextLayout","List","ListItem","ListItemAvatar","Avatar","alt","src","ListItemText","primary","secondary","Fragment","Typography","component","Divider","Home","tweetsList","useState","setText","inputText","useCallback","event","target","unsubscribe","orderBy","onSnapshot","snapshots","docChanges","forEach","change","tweet","splice","fetchNewTweetText","TweetHeader","UserIcon","UserName","signOut","NameBox","TweetTitle","TweetItem","getState","length","alert","saveText","UsersTweet","map","index","key","div","p","img","h2","Router","exact","path","App","Boolean","window","location","hostname","match","initialState","newTweets","UsersReducer","action","tweetsReducer","history","History","store","reduxCreateStore","combineReducers","router","connectRouter","applyMiddleware","routerMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cf1c3f45.chunk.js","sourcesContent":["import { createSelector } from \"reselect\";\n\nconst usersSelector = (state) => state.users;\n\nexport const getUserId = createSelector([usersSelector], (state) => state.uid);\n\nexport const getUserName = createSelector(\n  [usersSelector],\n  (state) => state.username\n);\nexport const getTwitterName = createSelector(\n  [usersSelector],\n  (state) => state.twitterName\n);\nexport const getIsSignedIn = createSelector(\n  [usersSelector],\n  (state) => state.isSignedIn\n);\nexport const getUserImage = createSelector(\n  [usersSelector],\n  (state) => state.image\n);\n","import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\nimport \"firebase/functions\";\nimport { firebaseConfig } from \"./config\";\n\nfirebase.initializeApp(firebaseConfig);\nexport const auth = firebase.auth();\nexport const db = firebase.firestore();\nexport const storage = firebase.storage();\nexport const functions = firebase.functions();\nexport const FirebaseTimestamp = firebase.firestore.Timestamp;\n","export const firebaseConfig = {\n  apiKey: \"AIzaSyDcr-kKHhnkLRpTJLytgj3zz1Q5FapF480\",\n  authDomain: \"auth-test-86bbf.firebaseapp.com\",\n  databaseURL: \"https://auth-test-86bbf.firebaseio.com\",\n  projectId: \"auth-test-86bbf\",\n  storageBucket: \"auth-test-86bbf.appspot.com\",\n  messagingSenderId: \"840706133120\",\n  appId: \"1:840706133120:web:fbca5c8051dc73bc88aa65\",\n  measurementId: \"G-LP7GCRPZPC\",\n};\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getIsSignedIn } from \"./Component/Users/selector\";\nimport { listenAuthState } from \"./Component/Users/operations\";\n\nconst Auth = ({ children }) => {\n  const dispatch = useDispatch();\n  const selector = useSelector((state) => state);\n  const isSignedIn = getIsSignedIn(selector);\n\n  useEffect(() => {\n    if (!isSignedIn) {\n      dispatch(listenAuthState());\n    }\n  }, []);\n\n  if (!isSignedIn) {\n    return <></>;\n  } else {\n    return children;\n  }\n};\nexport default Auth;\n","import { signInAction, signOutAction } from \"./actions\";\nimport { push } from \"connected-react-router\";\n//import firebase\nimport { auth, db, FirebaseTimestamp } from \"../../Firebase/index\";\nimport firebase from \"firebase\";\n\nexport const listenAuthState = () => {\n  return async (dispatch) => {\n    return auth.onAuthStateChanged((user) => {\n      if (user) {\n        const uid = user.uid;\n        db.collection(\"users\")\n          .doc(uid)\n          .get()\n          .then((snapshot) => {\n            const data = snapshot.data();\n\n            dispatch(\n              signInAction({\n                isSignedIn: true,\n                uid: uid,\n                twitterName: data.twitterName,\n                username: data.username,\n                image: data.image,\n              })\n            );\n          });\n      } else {\n        dispatch(push(\"/login\"));\n      }\n    });\n  };\n};\n\n//twitterでログイン\nexport const twitterSignIn = () => {\n  return async (dispatch) => {\n    const provider = new firebase.auth.TwitterAuthProvider();\n    firebase.auth().languageCode = \"pt\";\n    provider.setCustomParameters({\n      lang: \"es\",\n    });\n\n    firebase\n      .auth()\n      .signInWithPopup(provider)\n      .then((result) => {\n        const user = result.user;\n\n        const twitterName = result.additionalUserInfo.username;\n        console.log(result.additionalUserInfo.username);\n        const twitterId = result.user.providerData[0].uid;\n        const username = result.user.providerData[0].displayName;\n        const photoUrl = result.user.providerData[0].photoURL;\n\n        const timestamp = FirebaseTimestamp.now();\n        const uid = user.uid;\n\n        const userData = {\n          createed_at: timestamp,\n          updated_at: timestamp,\n          role: \"customer\",\n          twitterId: twitterId,\n          uid: uid,\n          twitterName: twitterName,\n          username: username,\n          image: photoUrl,\n        };\n\n        //firebaseに登録\n        db.collection(\"users\")\n          .doc(uid)\n          .set(userData)\n          .then(() => {\n            dispatch(push(\"/\"));\n          });\n      });\n  };\n};\n\n//サインアウト\nexport const signOut = () => {\n  return async (dispatch) => {\n    auth.signOut().then(() => {\n      dispatch(signOutAction());\n      dispatch(push(\"/login\"));\n    });\n  };\n};\n","export const SIGN_IN = \"SIGN_IN\";\nexport const signInAction = (userState) => {\n  return {\n    type: \"SIGN_IN\",\n    payload: {\n      isSignedIn: true,\n      role: userState.role,\n      uid: userState.uid,\n      username: userState.username,\n      twitterName: userState.twitterName,\n      image: userState.image,\n    },\n  };\n};\n\nexport const SIGN_OUT = \"SIGN_OUT\";\nexport const signOutAction = () => {\n  return {\n    type: \"SIGN_OUT\",\n    payload: {\n      isSignedIn: false,\n      uid: \"\",\n      username: \"\",\n      image: \"\",\n      role: \"\",\n    },\n  };\n};\n","//インポート\nimport React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\n//デザイン\nconst useStyles = makeStyles({\n  button: {\n    backgroundColor: \"#4dd0e1\",\n    color: \"000\",\n    fontSize: 16,\n    height: 48,\n    marginButtom: 16,\n    width: 256,\n  },\n});\n\nconst PrimaryButton = (props) => {\n  const classes = useStyles();\n\n  return (\n    <Button\n      className={classes.button}\n      variant=\"contained\"\n      onClick={() => props.onClick()}\n    >\n      {props.label}\n    </Button>\n  );\n};\nexport default PrimaryButton;\n","//インポート\nimport React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\n//デザイン\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    backgroundColor: \"grey\",\n    color: \"000\",\n    fontSize: 16,\n    height: 30,\n    marginButtom: 16,\n    width: 150,\n  },\n}));\n\nconst GreyButton = (props) => {\n  const classes = useStyles();\n\n  return (\n    <Button\n      className={classes.button}\n      variant=\"contained\"\n      onClick={() => props.onClick()}\n    >\n      {props.label}\n    </Button>\n  );\n};\nexport default GreyButton;\n","import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst TextInput = (props) => {\n  return (\n    <TextField\n      fullWidth={props.fullWidth} //画面横幅  boorean\n      label={props.label} //入力内容\n      margin=\"dense\"\n      multiline={props.multiline} //複数行の入力するか  boorean\n      required={props.required} // 必須入力項目か　boorean\n      rows={props.rows} //行数　multilineがtrueの時 number\n      value={props.value} //受け取るusestate\n      type={props.type} //入力タイプ \"text   email   password number\n      onChange={props.onChange} //関数　useCallback\n    />\n  );\n};\nexport default TextInput;\n","import React from \"react\";\nimport { PrimaryButton } from \"../Component/UIkit\";\nimport { useDispatch } from \"react-redux\";\nimport { twitterSignIn } from \"../Component/Users/operations\";\nimport styled from \"styled-components\";\n\nconst Login = () => {\n  const dispatch = useDispatch();\n  return (\n    <StyledLogin>\n      <PrimaryButton\n        label=\"ツイッターでログイン\"\n        onClick={() => dispatch(twitterSignIn())}\n      ></PrimaryButton>\n    </StyledLogin>\n  );\n};\n\nexport default Login;\n\nconst StyledLogin = styled.section`\n  width: 600px;\n  margin: 0 auto;\n  text-align: center;\n  margin-top: 50px;\n`;\n","export const FETCH_TEXT = \"FETCH_TEXT\";\nexport const fetchTextAction = (tweets) => {\n  return {\n    type: \"FETCH_TEXT\",\n    payload: tweets,\n  };\n};\n","import { FirebaseTimestamp, db } from \"../../Firebase\";\nimport { fetchTextAction } from \"./actions\";\n\nconst tweetRef = db.collection(\"tweets\");\n\n//text取り出し\nexport const fetchText = () => {\n  return async (dispatch) => {\n    tweetRef\n      .orderBy(\"updated_at\", \"desc\")\n      .get()\n      .then((snapshots) => {\n        const textList = [];\n        snapshots.forEach((snapshot) => {\n          const text = snapshot.data();\n          textList.push(text);\n        });\n        dispatch(fetchTextAction(textList));\n      });\n  };\n};\n\nexport const fetchNewTweetText = (text) => {\n  return async (dispatch) => {\n    dispatch(fetchTextAction(text));\n  };\n};\n\n//Textのdb登録\nexport const saveText = (text) => {\n  return async (dispatch, getState) => {\n    if (text.length === 0) {\n      alert(\"なにも書いてないじゃん\");\n      return false;\n    } else {\n      const users = getState().users;\n      const user = users.twitterName;\n      const image = users.image;\n      const uid = users.uid;\n\n      const timestamp = FirebaseTimestamp.now();\n      const data = {\n        text: text,\n        user: user,\n        uid: uid,\n        image: image,\n        updated_at: timestamp,\n      };\n      tweetRef.doc().set(data);\n    }\n  };\n};\n","import { createSelector } from \"reselect\";\n\nconst tweetsSelector = (state) => state.tweets;\nconst newTweetsSelector = (state) => state.newTweets;\n\nexport const getTweetText = createSelector(\n  [tweetsSelector],\n  (state) => state.list\n);\n","import React from \"react\";\nimport { getUserId } from \"../Component/Users/selector\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useSelector } from \"react-redux\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\",\n    backgroundColor: \"white\",\n  },\n  inline: {\n    display: \"inline\",\n  },\n});\n\nconst TextIndicate = ({ textUid, text, userImage, twitterName }) => {\n  const classes = useStyles();\n  const selector = useSelector((state) => state);\n  const uid = getUserId(selector);\n\n  const userLayout = textUid === uid ? \"p-chat__reverse\" : \"p-chat-row\";\n  const userTextLayout = textUid === uid ? \"p-text-revers\" : \"\";\n\n  return (\n    <List className={classes.root}>\n      <ListItem className={userLayout}>\n        <ListItemAvatar>\n          <Avatar alt=\"user image\" src={userImage} />\n        </ListItemAvatar>\n\n        <ListItemText\n          className={userTextLayout}\n          primary={\"@\" + twitterName}\n          secondary={\n            <React.Fragment>\n              <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={classes.inline}\n                color=\"textPrimary\"\n              >\n                {text}\n              </Typography>\n            </React.Fragment>\n          }\n        />\n      </ListItem>\n      <Divider />\n    </List>\n  );\n};\n\nexport default TextIndicate;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { GreyButton, TextInput } from \"../Component/UIkit\";\nimport { signOut } from \"../Component/Users/operations\";\nimport { fetchNewTweetText, saveText } from \"../Component/Tweets/operations\";\nimport {\n  getTwitterName,\n  getUserImage,\n  getUserName,\n} from \"../Component/Users/selector\";\n\nimport { getTweetText } from \"../Component/Tweets/selector\";\nimport styled from \"styled-components\";\nimport TextIndicate from \"../Component/TextIndicate\";\nimport { db } from \"../Firebase/index\";\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const selector = useSelector((state) => state);\n  const username = getUserName(selector);\n  const userImage = getUserImage(selector);\n  const twitterName = getTwitterName(selector);\n\n  //tweetSelector\n  let tweetsList = getTweetText(selector);\n\n  const [text, setText] = useState(\"\");\n\n  const inputText = useCallback(\n    (event) => {\n      setText(event.target.value);\n    },\n    [setText]\n  );\n\n  useEffect(() => {\n    const unsubscribe = db\n      .collection(\"tweets\")\n      .orderBy(\"updated_at\", \"desc\")\n      .onSnapshot((snapshots) => {\n        snapshots.docChanges().forEach((change) => {\n          const tweet = change.doc.data();\n          const changeType = change.type;\n          switch (changeType) {\n            case \"added\":\n              tweetsList.splice(0, 0, tweet);\n              break;\n            default:\n              break;\n          }\n        });\n        dispatch(fetchNewTweetText(tweetsList));\n      });\n    return () => unsubscribe();\n  }, []);\n\n  return (\n    <section>\n      <TweetHeader>\n        <UserIcon src={userImage} alt=\"ユーザー画像\" />\n        <UserName>{\"TwtterName : \" + twitterName}</UserName>\n        <GreyButton label=\"ログアウト\" onClick={() => dispatch(signOut())} />\n      </TweetHeader>\n\n      <NameBox>\n        <p>{username + \" 様ようこそ\"}</p>\n      </NameBox>\n\n      <TweetTitle>なんでもかいてええで</TweetTitle>\n      <TweetItem>\n        <TextInput\n          fullWidth={true} //画面横幅  boorean\n          label=\"tweet\" //入力内容\n          margin=\"dense\"\n          multiline={false} //複数行の入力するか  boorean\n          required={true} // 必須入力項目か　boorean\n          rows={1} //行数　multilineがtrueの時 number\n          value={text} //受け取るusestate\n          type=\"text\" //入力タイプ \"text   email   password number\n          onChange={inputText} //関数　useCallback\n        />\n        <GreyButton\n          label=\"tweet\"\n          onClick={() => {\n            dispatch(saveText(text));\n            setText(\"\");\n          }}\n        />\n      </TweetItem>\n      <UsersTweet>\n        {tweetsList.length > 0 &&\n          tweetsList.map((tweet, index) => (\n            <TextIndicate\n              key={index}\n              text={tweet.text}\n              twitterName={tweet.user}\n              userImage={tweet.image}\n              textUid={tweet.uid}\n            />\n          ))}\n      </UsersTweet>\n    </section>\n  );\n};\nexport default Home;\n\nconst TweetHeader = styled.div`\n  width: 100%;\n  margin: 0 auto;\n  display: flex;\n  align-items: center;\n  background-color: teal;\n  justify-content: center;\n`;\nconst UserName = styled.p`\n  margin-right: 100px;\n  color: white;\n`;\n\nconst UserIcon = styled.img`\n  width: 50px;\n  height: 50px;\n  border-radius: 25px;\n  margin-right: 20px;\n  margin-left: 10px;\n`;\n\nconst NameBox = styled.div`\n  width: 600px;\n  margin: 0 auto;\n  display: flex;\n`;\n\nconst TweetTitle = styled.h2`\n  width: 600px;\n  height: 50px;\n  margin: 0 auto;\n  text-align: center;\n  font-size: 20px;\n`;\n\nconst TweetItem = styled.div`\n  width: 600px;\n  margin: 0 auto;\n  display: flex;\n  align-items: center;\n`;\nconst UsersTweet = styled.div`\n  width: 600px;\n  margin: 0 auto;\n`;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router\";\nimport Auth from \"./Auth\";\nimport Login from \"./Templete/Login\";\nimport Home from \"./Templete/Home\";\n\nconst Router = () => {\n  return (\n    <Switch>\n      <Route exact path={\"/login\"} component={Login} />\n      <Auth>\n        <Route exact path={\"(/)?\"} component={Home} />\n      </Auth>\n    </Switch>\n  );\n};\nexport default Router;\n","import React from \"react\";\nimport Router from \"./Router\";\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <>\n      <main>\n        <Router />\n      </main>\n    </>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n  users: {\n    isSignedIn: false,\n    uid: \"\",\n    role: \"\",\n    username: \"\",\n    image: \"\",\n    twitterName: \"\",\n  },\n  tweets: {\n    list: [],\n  },\n  newTweets: {\n    list: [],\n  },\n};\nexport default initialState;\n","import * as Actions from \"./actions\";\nimport initialState from \"../Store/initialState\";\n\nexport const UsersReducer = (state = initialState.users, action) => {\n  switch (action.type) {\n    case Actions.SIGN_IN:\n      return {\n        ...state,\n        ...action.payload,\n      };\n    case Actions.SIGN_OUT:\n      return {\n        ...action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import * as Actions from \"./actions\";\nimport initialState from \"../Store/initialState\";\n\nexport const tweetsReducer = (state = initialState.tweets, action) => {\n  switch (action.type) {\n    case Actions.FETCH_TEXT:\n      return {\n        ...state,\n        list: [...action.payload],\n      };\n    default:\n      return state;\n  }\n};\n","import {\n  createStore as reduxCreateStore,\n  combineReducers,\n  applyMiddleware,\n} from \"redux\";\nimport thunk from \"redux-thunk\";\n\n//import react-router\nimport { connectRouter, routerMiddleware } from \"connected-react-router\";\n\n//import reducers\nimport { UsersReducer } from \"../Users/reducers\";\nimport { tweetsReducer } from \"../Tweets/reducers\";\n\nexport default function createStore(history) {\n  return reduxCreateStore(\n    combineReducers({\n      router: connectRouter(history),\n      tweets: tweetsReducer,\n\n      users: UsersReducer,\n    }),\n    applyMiddleware(routerMiddleware(history), thunk)\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// import redux\nimport { Provider } from \"react-redux\";\nimport createStore from \"./Component/Store/store\";\n\n//import react-router\nimport { ConnectedRouter } from \"connected-react-router\";\nimport * as History from \"history\";\n\nconst history = History.createBrowserHistory();\nexport const store = createStore(history);\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <App />\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}